 
2.lua简介：小巧脚本语言，解释器小，解释快速，高度可移植。

3.游戏中使用到的模式：单例模式，工程模式（客服端与具体产品解耦），mvc(职责清楚，通过中间控制器对数据层和显示层解耦，便于修改维护和扩展)，
中介者模式（解耦），模板模式（功能扩展），适配器模式（万不得已时使用），修饰器模式（在不使用继承的情况对类型进行功能扩展）

4.什么是面向对象：站在对象（责任的实体，责任分为状态和行为）的角度思考问题，具体关心对象的3个层面，一是概念:对象负责什么，责任是什么；
二是规约:如何使用对象（对象有什么行为），三是:具体怎么实现。

5.面向对象三大特性：
封装（对数据，类型，实现的隐藏，对使用者不用关系具体的实现，使用更容易，自己对自己负责，控制者具体实现无任何依赖，
修改实现的时候不会产生副作用）

继承：继承基类的一些或所有特性


多态：一种方式引用一个类型的多个派生类，但是获得的方法对应每一个派生类。


6.基础算法：
排序- 快速排序（将数组拆分成两半，保持前面部分所有小于（或大于后面部分），然后分别将前后部分执行前面步骤，如此循环，
直到数组拆分的数组长度等于一点的时候停止执行）

归并排序-（使用分治的思想，首先将数组拆分成长度为一多个部分，然后依次有序的两两合并）

冒泡排序-（将第一个位置与其他位置比较交换，依次类推）

选择排序-（从数组无序区间中选择一个最大（最小）的放在已选择的有序区间的最后，以此类推）

插入-（将无序数组依次插入有序数组的正确位置）

查询：
顺序查找-适合用于顺序存储和链式的数据 

二分查找-有序列表

插值查询-二分的变体，修改了拆分的位置

树表查找-二叉树查找 平衡数 红黑树

hash查找-键值对的方式（无冲突情况下查找复杂度为1）

数据结构：数据间的联系，与物理内存存放方式（数组，堆，栈，队列，链表，树，图，散列表）

算法：让计算更快更准更狠。

渲染知识：
渲染流水线-数据准备（顶点相关数据（位置，法切线，颜色，材质，uv））- 顶点处理-光栅化-像素着色-模板，深度，透明测试及颜色混合，-输出到缓冲区

编写shader- uv动画, 雾效，基于噪声纹理的水面波动，物体燃烧效果。


如何对需求进行分析设计：确定需求及需求变动 - 使用面向对象分析方法将问题进行对象划分，确定对象职责，使用接口或抽象技术进行模块组合
最后就是具体实现。




