        /* 采用二分查找
         * 设要查找的数字为x
         * 1.先判断x是否大于数组开始元素记Biger，
         * 2.使用二分查找，判断中位数是否大于第一个元素（大于则分割在未旋转区域）
         *   （1）如果大于 且Biger == true, 则与中位数比较，得到下次二分的区域， 如果Biger == false,
         *        直接选择包含旋转的区域进行下次二分
         *   （2）如果小于 且Biger == true, 直接选择包含旋转的区域， 如果Biger == false,
         *        则与中位数比较，得到下次二分的区域
         */
        public bool SearchInRotateArray(int[] array, int x, int start, int end)
        {
            if (array == null)
            {
                throw new Exception("array is null"); 
            }
            int length = array.Length;
            if (length == 0 || start < 0 || end >= length)
            {
                throw new Exception("arg exception");
            }

            if (start > end)
            {
                return false;
            }
            bool biger;
            int sIndex = start;
            int eIndex = end;
            while (sIndex <= eIndex)
            {
                int sValue = array[sIndex];
                biger = sValue < x;
                int mid = (sIndex + eIndex) / 2;
                int midValue = array[mid];
                if (midValue == x || sValue == x)
                {
                    return true;
                }
                bool isInRotateArea = midValue < sValue;
                if (midValue == sValue)
                {
                    for (int i = sIndex; i < mid; i++)
                    {
                        isInRotateArea = array[i] != sValue;
                    }
                }
                if (!isInRotateArea)
                {
                    if (biger)
                    {
                        if (x > midValue)
                        {
                            sIndex = mid + 1;
                        }
                        else
                        {
                            eIndex = mid - 1;
                        }
                    }
                    else
                    {
                        sIndex = mid + 1;
                    }
                }
                else
                {
                    if (biger)
                    {
                        eIndex = mid - 1;
                    }
                    else
                    {
                        if (x > midValue)
                        {
                            sIndex = mid + 1;
                        }
                        else
                        {
                            eIndex = mid - 1;
                        }
                    }
                }

            }
            return false;
        }